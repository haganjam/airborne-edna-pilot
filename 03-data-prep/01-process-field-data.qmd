---
title: "Process-fieldwork-data"
format: html
editor: source
---

We start by loading the data collected in the field from the Google Sheet. These data were all collected via the fieldwork app (`edna-pilot-collect`).

## Basic data preparation

```{r}
# load the field data from Google Drive
field_data <- googlesheets4::read_sheet("https://docs.google.com/spreadsheets/d/1fJuy4kHUN6CYKzhboMhRq4J_STO3BhGRMCNWwQ5jtkc/edit?usp=sharing")
head(field_data)
```

First, we assign a `subject-id` to each data-point that was collected:

```{r}
# assign a sample-id
field_data$subject_id <- rep(1:(nrow(field_data)/19), each = 19)
```

Next, we pivot the data-set into the wide-format so that there is one row per data-point defined by the `subject_id` variable:

```{r}
# pivot to a wider format
field_data <-
  field_data |>
  tidyr::pivot_wider(id_cols = "subject_id",
                     names_from = "question_id",
                     values_from = "response")
head(field_data)
```

The inland control site was originally planned to be (*Natrium* building)\[https://www.gu.se/en/study-gothenburg/natrium-a-new-building-on-medicinareberget\]. Therefore, this was built as an option into the fieldwork app. However, given the distances required to travel in a given day, this was not practical and, as a result, we switched to a different inland control site in the *Grimmered* commune in Gothenburg (Ruddalsvägen 5, 426 68 Västra Frölunda, Sweden). Therefore, we recode *Natrium* to *Grimmered*:

```{r}
# recode natrium to grimmered
field_data$site <- ifelse(field_data$site == "natrium", "grimmered", field_data$site)
```

Next, we add a variable which is the site-label (i.e. a code to refer to the different sites):

```{r}
# relabel the site value
field_data <-
  field_data |>
  dplyr::mutate(site_label = dplyr::case_when(
    site == "vrango" ~ "vr",
    site == "saltholmen" ~ "st",
    site == "nya varvet" ~ "nv",
    site == "grimmered" ~ "gr"
  ))
```

The `filter_control` variable is not very intuitively coded in the fieldwork app. Therefore, we recode to make it more clear what a sample is and what a control (i.e. a blank is):

```{r}
# relabel the filter_control variable
field_data <-
  field_data |>
  dplyr::mutate(filter_control = dplyr::case_when(
    filter_control == "no" ~ "sample",
    filter_control == "yes"  ~ "control"
  ))
```

Some samples were logged to test the fieldwork app. These were coded as `test == "yes"`. Therefore, we remove these samples:

```{r}
# remove the test samples
field_data <-
  field_data |>
  dplyr::filter(test != "yes")
```

Given that we have done these initial data-processing, we then create a sample-level identifier variable: `unique_id`.

```{r}
# create a unique sample variable
field_data$unique_id <-
  with(field_data,
       paste(segment, date, site_label, sample_number, filter_control, sep = "_"))
```

Next, we reorganise the variables in the data.frame:

```{r}
# reorder the variables in the data.frame
field_data <-
  field_data |>
  dplyr::select(subject_id, unique_id, season, test, segment,
                site, site_label, date, filter_control, sample_number, time, lat, lon,
                weather, person, depth, volume, physical, other)
head(field_data)
```

## Basic data-cleaning

Based on the field notebook, we know that the times and dates were not entered as proper time-date variables. Therefore, these need to be checked and converted. In addition, it's important to note that these times are approximate and, in most cases, are only going to be accurate to the nearest hour.

```{r}
# check the time variable
unique(field_data$time)
```

From this initial look, it's clear that one of the entered times was done using the `h` separator. This needs to be fixed:

```{r}
# replace the h separator using gsub()
field_data$time <- gsub(pattern = "h", replacement = ":", x = field_data$time)
```

We now run a test to make sure that this was fixed:

```{r}
# check if any time values still have an h
stopifnot(!any(grepl(pattern = "h", field_data$time)))
```

In addition, we can check the unique values again to make sure that this h was dealt with:

```{r}
# check if the h was fixed
unique(field_data$time)
```

Convert to dates and times:

```{r}
# convert to dates and times
field_data$time <- 
  lubridate::ymd_hm(paste(field_data$date, field_data$time, sep = " "), tz = "UTC")
```

Add relevant lat-lon coordinates to these data for each of the sites:

```{r}
# add the latitude of the sites
field_data <-
  field_data |>
  dplyr::mutate(lat = dplyr::case_when(
    site_label == "vr" ~ 57.5742915,
    site_label == "st" ~ 57.6594212,
    site_label == "nv" ~ 57.6862350,
    site_label == "gr" ~ 57.6695114
  ))

# add the longitude of the sites
field_data <-
  field_data |>
  dplyr::mutate(lon = dplyr::case_when(
    site_label == "vr" ~ 11.7758066,
    site_label == "st" ~ 11.8372307,
    site_label == "nv" ~ 11.8854508,
    site_label == "gr" ~ 11.9047494
  ))
```

There seems to be a problematic row where, on the 17th of May, we recorded a water sample at Grimmered which is not possible. I think I accidentally filled in the sample as Grimmered when it is in fact Vrango. Both the water and the air samples might have been accidentally set as Vrango but I'll need to double check.







